---
type Props = { showArrow?: boolean };

const { showArrow = true } = Astro.props;
---

<drop-down class="relative">
  <button type="button" class="group peer flex items-center uppercase">
    <slot name="button" />
    {
      showArrow && (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
          stroke-linejoin="round"
          class="ml-1 inline-block transition motion-safe:group-focus:rotate-180"
        >
          <path d="m6 9 6 6 6-6" />
        </svg>
      )
    }</button
  >
  <div
    data-dropdown-panel
    class="invisible absolute w-max opacity-0 transition-all focus-within:visible focus-within:opacity-100 peer-focus:visible peer-focus:opacity-100"
  >
    <slot />
  </div>
</drop-down>

<script>
  const debounce = (cb: () => void, time = 100) => {
    let timer: number;
    return () => {
      if (timer) clearTimeout(timer);
      timer = setTimeout(cb, time);
    };
  };

  class Dropdown extends HTMLElement {
    constructor() {
      super();
      const $panel = this.querySelector(
        "[data-dropdown-panel]",
      ) as HTMLDivElement;

      const adjustDropdown = () => {
        const { right, width } = $panel.getBoundingClientRect();
        const { innerWidth } = window;
        if (innerWidth < right) {
          $panel.style.left = "auto";
          $panel.style.right = "0";
        } else if (right + width < innerWidth) {
          $panel.style.right = "auto";
          $panel.style.left = "0";
        }
      };

      window.addEventListener("resize", debounce(adjustDropdown));
      window.addEventListener("load", () => adjustDropdown());
    }
  }
  customElements.define("drop-down", Dropdown);
</script>
